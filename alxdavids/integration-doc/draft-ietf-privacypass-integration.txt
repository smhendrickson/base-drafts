



Network Working Group                                        A. Davidson
Internet-Draft                                            Brave Software
Intended status: Informational                                 S. Valdez
Expires: 22 April 2022                                        Google LLC
                                                               C.A. Wood
                                                              Cloudflare
                                                         19 October 2021


                  Privacy Pass Protocol Specification
                   draft-ietf-privacypass-integration

Abstract

   This document specifies the necessary integration for building the
   Privacy Pass protocol, supporting symmetric verification and public
   metadata, on top of an existing oblivious pseudorandom function
   protocol.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 April 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Privacy Pass flow
     3.1.  Initialization phase
     3.2.  Issuance phase
     3.3.  Redemption phase
   4.  References
     4.1.  Normative References
     4.2.  Informative References
   Authors' Addresses

1.  Introduction

   The Privacy Pass protocol provides a privacy-preserving authorization
   mechanism.  In essence, the protocol allows clients to provide
   cryptographic tokens that prove nothing other than that they have
   been created by a given server in the past
   [I-D.ietf-privacypass-architecture].

   This document provides the necessary integration for building the
   authorization framework, based on existing constructions of oblivious
   pseudorandom function protocols [I-D.irtf-cfrg-voprf].  Moreover, we
   show how this integration allows public metadata to be introduced to
   the protocol, that is agreed by both clients and servers.

   This document DOES NOT cover the architectural framework required for
   running and maintaining the Privacy Pass protocol in the Internet
   setting.  In addition, it DOES NOT cover the choices that are
   necessary for ensuring that client privacy leaks do not occur.  Both
   of these considerations are covered in
   [I-D.ietf-privacypass-architecture].  In addition, considerations of
   how to embed the protocol interactions in the HTTP setting are
   considered in [I-D.ietf-privacypass-http-api].

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The following terms are used throughout this document.

   *  Client: An entity that provides authorization tokens to services
      across the Internet, in return for authorization.

   *  Server: A service (also known as an Issuer) that issues Privacy
      Pass tokens to clients.

   *  Key: The secret key used by the server for authorizing client
      data.

   We assume that all protocol messages are encoded into raw byte format
   before being sent across the wire.

3.  Privacy Pass flow

   There are three phases in the protocol: the initialization phase, the
   issuance phase, and the redemption phase.  We construct each phase
   based on the POPRF protocol construction detailed in
   [I-D.irtf-cfrg-voprf], and all algorithms and data types are
   inherited as such.  All implementations MUST use the OPRF(P-384, SHA-
   384) ciphersuite.

3.1.  Initialization phase

   The server samples a keypair and publishes a key configuration in a
   way that clients can retrieve it.  This configuration consists of the
   server's public key and configuration information for the underlying
   POPRF.

   struct {
      uint16 suite;
      uint8 public_key[Ne];
   } KeyConfig;

   KeyConfig.suite corresponds to a POPRF ciphersuite from
   [I-D.irtf-cfrg-voprf], Section 4, and KeyConfig.public_key
   corresponds to a serialized public key of length Ne bytes (denoted as
   a SerializedElement in [I-D.irtf-cfrg-voprf], Section 2).  In

   In order for higher-level applications to indicate which key
   configuration is being used, a common identifier, such as
   id=SHA256(KeyConfig), should be used.  Note that the ciphersuite that
   is used is determined entirely by the choice of suite in the server
   key configuration.

3.2.  Issuance phase

   Let info be the agreed upon metadata between client and server, and
   let config be the server's chosen key configuration.

   First, a client configures its verifiable context using config:

   client_context = SetupVerifiableClient(
                     config.suite, config.public_key
                    )

   Likewise, the server creates its own context using config and the
   corresponding private key key:

   server_context = SetupVerifiableServer(
                     config.suite, key, config.public_key
                    )

   The client then creates an issuance request for a random value nonce
   as follows:

   nonce = random(32)
   blind, blindedElement = client_context.Blind(nonce)

   The client then sends blindedElement to the server.  The server, upon
   receipt, evaluates the request:

   evaluatedElement, proof = server_context.Evaluate(
                              key, config.public_key,
                              blindedElement, info
                             )

   The server sends both evaluatedElement and proof to the client.
   These are concatenated together.  As the length of both is fixed,
   there is no ambiguity in parsing the result.

   The client then completes issuance as follows:

   output = client_context.Finalize(
             nonce, blind, evaluatedElement, info
            )

   This procedure may fail with an error (VerifyError or
   DeserializeError), in which case the issuance is said to have failed.
   The output of the issuance protocol is the concatenation of nonce and
   output, denoted as token:

   struct {
      uint8 nonce[32];
      uint8 output[Nh];
   } Token;

   where Nh is as defined in [I-D.irtf-cfrg-voprf].

3.3.  Redemption phase

   The client sends the Token to the server to verify locally.  In
   particular, the server verifies the Token as follows:

   valid = server_context.VerifyFinalize(
            key, token.nonce, token.output, info
           )

   Redemption is considered successful if valid is true.

4.  References

4.1.  Normative References

   [I-D.ietf-privacypass-architecture]
              Davidson, A. and C. A. Wood, "Privacy Pass Architectural
              Framework", Work in Progress, Internet-Draft, draft-ietf-
              privacypass-architecture-01, 22 February 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              privacypass-architecture-01>.

   [I-D.ietf-privacypass-http-api]
              Valdez, S., "Privacy Pass HTTP API", Work in Progress,
              Internet-Draft, draft-ietf-privacypass-http-api-01, 12
              July 2021, <https://datatracker.ietf.org/doc/html/draft-
              ietf-privacypass-http-api-01>.

   [I-D.irtf-cfrg-voprf]
              Davidson, A., Faz-Hernandez, A., Sullivan, N., and C. A.
              Wood, "Oblivious Pseudorandom Functions (OPRFs) using
              Prime-Order Groups", Work in Progress, Internet-Draft,
              draft-irtf-cfrg-voprf-07, 6 July 2021,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              voprf-07>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://datatracker.ietf.org/doc/html/rfc8446>.

4.2.  Informative References

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013,
              <https://datatracker.ietf.org/doc/html/rfc7049>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://datatracker.ietf.org/doc/html/rfc7159>.

Authors' Addresses

   Alex Davidson
   Brave Software
   Lisbon
   Portugal

   Email: alex.davidson92@gmail.com


   Steven Valdez
   Google LLC

   Email: svaldez@chromium.org


   Christopher A. Wood
   Cloudflare
   101 Townsend St
   San Francisco,
   United States of America

   Email: caw@heapingbits.net
